4.11 京东现场面试问题
一、笔试
1.闭包的特性
2.封装ajax
3.position 有哪几种属性
4.渐进增强与优雅降级
答案：
	渐进增强：一开始就针对低版本的浏览器进行构建页面，保证最基本功能，然后再对高级浏览器进行交互、效果等改进和追加功能以达到更好的用户体验。（简单来说，就是从被所有浏览器都支持的最基本的功能开始，逐步的添加那些只有新式浏览器才支持的功能。向页面添加无害于基础浏览器的额外样式功能，当浏览器支持时，它会自动的呈现出来并发挥作用）。
	优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。（Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认他们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了，为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效。）
	
	区别：优雅降级是从复杂的现状开始，并试图减少用户体验的供给，而渐进增强则是从一个非常基础的、能够起作用的版本开始，并不断扩充，以适应未来环境的需要。
	
	渐进增强：渐进增强的观点认为应该关注内容本身。
	优雅降级：优雅降级的观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。
	
5.使用一个div画五个边框
6.常见的浏览器兼容性问题
7.作用域链
8.跨域解决方案
9.快速排序
10.查找重复元素数组
11.XSS解决方案
12.浏览器内核有哪些
答案：浏览器的内核是分为两个部分的，一是渲染引擎，另一个是JS引擎。现在JS引擎比较独立，内核更加倾向于说渲染引擎。
	Trident 内核：IE浏览器的内核
	Gecko 内核：Firefox 内核， 可以跨平台
	Webkit 内核： Safari 浏览器和 Chrome浏览器
	Presto 内核：代表作是 Opera，曾经最快的浏览器
	Blink 内核：
12.px 和 em
13.const 和 let 的区别
二、面试
1.自我介绍
2.介绍一下项目，简历上没写项目，看不出来用到哪些技术
3.问了一下relative 和 position 的相对位置

5.reflow 和 repaint，如何避免回流？
答：1）当页面布局和几何信息发生变化的时候，就需要回流。比如以下情况：

添加或删除可见的DOM元素
元素的位置发生变化
元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）
内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。
页面一开始渲染的时候（这肯定避免不了）
浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）
注意：回流一定会触发重绘，而重绘不一定会回流

2）浏览器的优化机制：
队列化修改并批量执行来优化重排过程。
但是，获取布局信息的操作的时候，会强制队列刷新，比如当你访问以下属性或者使用以下方法：
offsetTop、offsetLeft、offsetWidth、offsetHeight
scrollTop、scrollLeft、scrollWidth、scrollHeight
clientTop、clientLeft、clientWidth、clientHeight
getComputedStyle()
getBoundingClientRect
因此，我们在修改样式的时候，最好避免使用上面列出的属性，他们都会刷新渲染队列。如果要使用它们，最好将值缓存起来。

3）减少回流和重绘：
最小化重绘和重排，合并多次对DOM和样式的修改，一次处理
批量修改DOM：
3-1）使元素脱离文档流
3-2）对其进行多次修改
3-3）将元素带回到文档中。

有三种方式可以让DOM脱离文档流：
I)隐藏元素，应用修改，重新显示
II）使用文档片段(document fragment)在当前DOM之外构建一个子树，再把它拷贝回文档。
III）将原始元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素。
现代浏览器会使用队列来储存多次修改，进行优化，所以对这个优化方案，我们其实不用优先考虑。

IV）避免触发同步布局事件
V）对于复杂动画效果,使用绝对定位让其脱离文档流
VI）css3硬件加速（GPU加速）
1. 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。
2. 对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。

常见的触发硬件加速的css属性：
transform
opacity
filters
Will-change
太多元素使用css3硬件加速，会导致内存占用较大，会有性能问题。
在GPU渲染字体会导致抗锯齿无效。这是因为GPU和CPU的算法不同。因此如果你不在动画结束的时候关闭硬件加速，会产生字体模糊。








阿里
1.在团队中主要负责前端的哪些部分？
答：1）前端部分：
	维护官网首页及新页面开发 —— 登录模块、个人中心、商业模式购买页
	部分基础组件的封装 —— 基于JQuery-UI 和美工设计风格，实现我们自己的 UI 组件库，并作了补充，如滚动条，步骤，下拉框等
	网站SEO优化 —— 负责新增页面的模板的 title、keywords、description 的描写，title > keywords > description , 避免使用Load等动态加载页面
	前端性能优化 —— 请求合并、使用Bundles、sprite图等脚本压缩、压缩资源（如用户上传图片）、延迟加载。
	2）后端部分（C#）
	第三方接口封装
	业务路由层和模板层
	数据导入功能模块开发

2.主要用的技术栈是哪些？
答：HTML5、CSS3、JQuery

3.对前端的最新技术有没有了解？有没有使用经验？
答：使用过Webpack打包，热启动，简单使用过Vue

4.对ES6有没有了解，有哪些新特性，有没有应用经验？
答：1）Promise —— 状态（pending/reject/resoved）、.then(resove,reject)/.catch(reject)、其他API如Promise.all()/Promise.race()/Promise.done()
	2）Async 和 Await
	3）Import 和 Export 
	4）箭头函数
	5）结构赋值
5.jQuery插件图片裁剪是怎么实现的？裁剪是在前端还是后端完成？
答：这块功能主要分两部分，预览和裁剪；
    1）预览：
	创建一个固定宽高的容器作为预览区域，将用户上传的原图visibility:hidden；
	矩形区域背景色设为黑色；
	放一个Img,将图片转化为Base64，通过CSS设置为与预览容器等大，设置透明度0.4；
	放一个裁剪框div，一般为正方形，裁剪框里面放一张与预览容器等大的img，设置z-index最高，overflow:hidden;
	为预览区域绑定touchstart,touchend，touchmove事件,用户传入参入返回一个回调函数，当拖动预览框时
	触发该事件，并返回预览框的坐标，插件返回的是按比例还原后原图大小裁剪位置和大小；
	
	插件中有预处理机制，会先将图片的比例处理成与裁剪容器等比的图片。
	前台用户自定义多个大小尺寸不一的小预览区，根据插件返回的坐标及预览区域与原图的比例，调整图片的marigin
    2) 裁剪：
	将插件返回的预览区域的左上角坐标和大小，传给后台进行裁剪。
		
	
6.对基础组件是怎么维护的，怎么避免多次开发达到复用的目的？
答：基础组件实现按需加载，版本更新，有一个基本的base文件夹，里面放了所有基础组件，最常用的打包为js-0,
按功能和依赖关系打包为多个内聚的模块js-1/2...,每个页面都必须引用js-0,按需引用其他。
图片和css也类似放在content的base目录下面。.net 可以自动进行压缩和版本号更新，以避免浏览器缓存问题。

7.自己在前端做过最满意的工作是什么？最擅长哪部分？
答：

8.对Html5和CSS3有没有使用？了解哪些新特性？用了哪些新标签?
答：1）H5
	文档类型声明 <!DOCTYPE HTML>
	nav
	canvas
	header，footer
	Hgroup，section
	Mark
	figure、figcaption
	<small>
	占位符，placeholder
	required 必要的属性
	vedio
	pattern 正则
	input 新类型：date/email/url
	
	2）CSS3
	属性：Box-shadow、float、flex、box-sizing
	background-image/origin/sieze/repeat
	RGBA 和 透明度
	word-wrap
	textshadow 文字阴影
	border-radius 圆角
	媒体查询 rem
	border-image 边框图片
	::before,伪类
	:before,伪元素
	
	
9.对浏览器的兼容性到什么程度？
答：IE9+，
	1)不同浏览器的标签默认的margin和padding 不一样，应 *{margin:0;padding:0}
	2)IE6双边距Bug，block 元素设置 float 后有横向的margin时，IE6显示的比设置的大。可以通过display：Inline 转为行内元素
	3)设置较小高度标签，在IE6/7 中高度超出自己设置的高度。可通过over-flow:hidden;或者line-height
	4)chrome中文界面默认将小于12px的文本按12算，可通过-webkit-text-size-adjust:none;解决
	5)被点击访问过后的超链接样式不再具有hover和active了，解决方案是改变css顺序，LVHA，link,visited,hover,activate
	6)IE6的绝对定位，解决方案：使元素出发layout,可设置zoom:1，或者 width,height 不为auto
		

京东
1.对React、Vue、Webpack有没有了解？简历里有写
2.主要负责哪些前端工作？
3.核心组件是用的什么技术栈？
4.有没有移动端开发经验？移动端适配有没有了解？
5.有没有自己对前端技术的探索，平时是怎么学习前端新技术的？
6.有没有数据可视化的经验？使用过echart
7.有没有github账号，分享过什么？
8.对node.js熟悉吗？npm 常用命令？
9.用的什么版本管理工具？
10.立即执行函数用法
11.文档类型的作用
12.事件绑定有哪几种方式？如何实现的？

13.图片转Base64怎么实现？
答:两种方式：一、FileReader对象的DataURL方法；二、canvas对象的toDataURL

14.div垂直居中如何实现
15.频繁操作DOM的效率问题是谁引起的？主要原因是js是宿主需要，调用的是第三方的接口
16.解析URL的参数，有重复的合并为数组，有编码的需解码
17.闭包，作用域
18.初始化导入，数据量有没有限制，出错如何处理？
19.登录模块如何实现？有没有单点登录？cookie共享问题，怎么让外域登录？
20.webpack插件有哪些？
21.Vue的事件绑定如何实现？组件之间如何传递数据？
22.最近在学什么新技术？
23.Vue的生命周期？
24.js类的继承是怎么实现的，构造函数是如何实现的？

25.简述MVVM框架
MVC框架违背了“开放封闭原则”,面对这个问题，MVVM框架就出现了，它与MVC框架的主要区别有两点：
1、实现数据与视图的分离
2、通过数据来驱动视图，开发者只需要关心数据变化，DOM操作被封装了。
MVVM的实现原理：
三个核心：
1、响应式：vue如何监听data的属性变化
vue本身是没有办法感知到data属性的变化，依靠Object.defineProperty将每个数据属性变成访问器属性，从而在函数get和set中我们即可监听到data的属性发生了改变。
2、模板解析：vue的模板是如何被解析的
render 函数将模板解析为js
render函数中的核心就是with函数。
with函数将某个对象添加到作用域链的顶部，如果在 statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。
最终render函数返回的是一个虚拟DOM。

3、渲染：vue模板是如何被渲染成HTML的
模板渲染为html分为两种情况，第一种是初次渲染的时候，第二种是渲染之后数据发生改变的时候，它们都需要调用updateComponent
vm._vnode,判断其是否为空，若为空，则为初次渲染。否则，根据响应式使用diff算法



关于简历：
1.实现左侧题型列表的点击、拖拽事件以及调整题目顺序的拖拽事件
mousemove/mouseup/mousedown
e = e || window.event;
x = e.clientX, y = e.clientY;
_showMoveDom(e)

2.兼容 mui 关于 WebView 页面管理的部分接口，使业务模块开发人员可以不用关心接口实现，使用统一的接口完成 APP 和普通浏览器中的兼容；实现移动端引导页、节日欢迎页及首页的预加载和缓存机制；
3.本人还设计了第三方系统接入久其格格的单点登录系统和权限校验系统。
4.Webpack 常用的打包命令及常用配置项。

